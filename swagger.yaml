openapi: 3.0.0
paths:
  /:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
  /botTemplates:
    get:
      operationId: botTemplatesController_findAll
      summary: Список шаблонов ботов
      parameters: []
      responses:
        '200':
          description: ''
      tags: &ref_0
        - botTemplates
  /botTemplates/{id}:
    get:
      operationId: botTemplatesController_findOne
      summary: Данные шаблона бота
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: number
      responses:
        '200':
          description: ''
      tags: *ref_0
  /profiles:
    post:
      operationId: ProfilesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
    get:
      operationId: ProfilesController_findAll
      parameters: []
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized Request
  /profiles/{id}:
    get:
      operationId: ProfilesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: The resource was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
    patch:
      operationId: ProfilesController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileDto'
      responses:
        '200':
          description: The resource was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
        '422':
          description: Bad Request
    delete:
      operationId: ProfilesController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор профиля
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: The resource was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
  /accounts:
    get:
      operationId: AccountController_findAll
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountDto'
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Account'
        '201':
          description: The record has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Unauthorized Request
      tags: &ref_1
        - Accounts
  /accounts/{id}:
    patch:
      operationId: AccountController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор аккаунта
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountDto'
      responses:
        '200':
          description: The resource was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Account'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
        '422':
          description: Bad Request
      tags: *ref_1
  /signin:
    post:
      operationId: AuthController_signin
      summary: Войти в систему
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '201':
          description: Успешный вход в систему
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: accessToken по умолчанию действует 1 день
                  refreshToken:
                    type: string
                    description: refreshToken по умолчанию действует 7 дней
        '401':
          description: Неверное имя пользователя или пароль
      tags: &ref_2
        - auth
  /signup:
    post:
      operationId: AuthController_signup
      summary: Регистрация
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProfileDto'
      responses:
        '201':
          description: ''
          content:
            application/json:
              schema:
                type: object
      tags: *ref_2
  /refresh-token:
    post:
      operationId: AuthController_refreshToken
      summary: Обновить токен
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
      responses:
        '201':
          description: accessToken успешно обновлен
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    description: accessToken по умолчанию действует 1 день
                  refreshToken:
                    type: string
                    description: refreshToken по умолчанию действует 7 дней
      tags: *ref_2
  /platforms:
    post:
      operationId: PlatformController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreatePlatformDto'
      responses:
        '201':
          description: The record has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
      tags: &ref_3
        - Platforms
    get:
      operationId: PlatformController_findAll
      parameters: []
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Platform'
        '403':
          description: Unauthorized Request
      tags: *ref_3
  /platforms/{id}:
    get:
      operationId: PlatformController_findOne
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: The resource was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
      tags: *ref_3
    patch:
      operationId: PlatformController_update
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePlatformDto'
      responses:
        '200':
          description: The resource was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
        '422':
          description: Bad Request
      tags: *ref_3
    delete:
      operationId: PlatformController_remove
      parameters:
        - name: id
          required: true
          in: path
          description: Индификатор платформы
          example: 64f81ba37571bfaac18a857f
          schema:
            type: string
      responses:
        '200':
          description: The resource was returned successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Platform'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
      tags: *ref_3
  /bots:
    get:
      operationId: BotsController_findMy
      summary: Список ботов пользователя
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ObjectId'
      responses:
        '200':
          description: The resources were returned successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bot'
        '403':
          description: Unauthorized Request
      tags: &ref_4
        - bots
    post:
      operationId: BotsController_create
      summary: Создание нового бота
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBotDto'
      responses:
        '201':
          description: The record has been successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
      tags: *ref_4
  /bots/{id}:
    delete:
      operationId: BotsController_remove
      summary: Удаление бота
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
      tags: *ref_4
    patch:
      operationId: BotsController_update
      summary: Смена имени бота
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                botName:
                  type: string
      responses:
        '200':
          description: The resource was updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
        '403':
          description: Unauthorized Request
        '404':
          description: Resource not found
        '422':
          description: Bad Request
      tags: *ref_4
    get:
      operationId: BotsController_findOne
      summary: Данные бота пользователя
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bot'
      tags: *ref_4
info:
  title: API BotKits
  description: Ручки для команды frontend
  version: '1.0'
  contact: {}
tags: []
servers: []
components:
  schemas:
    CreateProfileDto:
      type: object
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 30
          example: Ivan Ivanov
        phone:
          type: string
          example: '+79501364578'
        avatar:
          type: string
          example: https://i.pravatar.cc/300
        balance:
          type: number
          example: 1400
      required:
        - username
        - phone
    Profile:
      type: object
      properties:
        username:
          type: string
          example: Ivan Ivanov
        phone:
          type: string
          example: '+79501364578'
        avatar:
          type: string
          example: https://i.pravatar.cc/300
        balance:
          type: number
          example: 1400
      required:
        - username
        - phone
        - avatar
        - balance
    UpdateProfileDto:
      type: object
      properties:
        username:
          type: string
          minLength: 2
          maxLength: 30
          example: Ivan Ivanov
        phone:
          type: string
          example: '+79501364578'
        avatar:
          type: string
          example: https://i.pravatar.cc/300
        balance:
          type: number
          example: 1400
    Credentials:
      type: object
      properties:
        email:
          type: string
          example: my@mail.ru
        password:
          type: string
          example: password123
        accessToken:
          type: string
          example: dkskddksldlslsajsjsdsk,cmksjdksdjskjdk
        refreshToken:
          type: string
          example: dkskddksldlslsajsjsdsk,cmksjdksdjskjdk
      required:
        - email
        - password
        - accessToken
        - refreshToken
    ObjectId:
      type: object
      properties: {}
    CreateAccountDto:
      type: object
      properties:
        type:
          enum:
            - local
            - google
            - yandex
            - mail
            - vk
            - ok
            - facebook
            - telegram
          type: string
          example: local
        role:
          enum:
            - user
            - admin
            - superAdmin
          type: string
          example: user
        credentials:
          $ref: '#/components/schemas/Credentials'
        profile:
          example: 64f9ac26edb84d7ebf6281d0
          allOf:
            - $ref: '#/components/schemas/ObjectId'
      required:
        - type
        - role
        - profile
    Account:
      type: object
      properties:
        type:
          type: string
          example: local
        role:
          type: string
          example: admin
        credentials:
          example:
            email: my@mail.ru
            password: password123
            accessToken: dkskddksldlslsajsjsdsk,cmksjdksdjskjdk
            refreshToken: dkskddksldlslsajsjsdsk,cmksjdksdjskjdk
          allOf:
            - $ref: '#/components/schemas/Credentials'
        profile:
          $ref: '#/components/schemas/Profile'
      required:
        - type
        - role
        - credentials
        - profile
    UpdateAccountDto:
      type: object
      properties:
        type:
          enum:
            - local
            - google
            - yandex
            - mail
            - vk
            - ok
            - facebook
            - telegram
          type: string
          example: local
        role:
          enum:
            - user
            - admin
            - superAdmin
          type: string
          example: admin
        credentials:
          $ref: '#/components/schemas/Credentials'
    FormFields:
      type: object
      properties:
        name:
          type: boolean
          example: true
        pages:
          type: boolean
          example: true
        accessKey:
          type: boolean
          example: false
        url:
          type: boolean
          example: true
      required:
        - name
        - pages
        - accessKey
        - url
    CreatePlatformDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: VK
        formFields:
          $ref: '#/components/schemas/FormFields'
      required:
        - icon
        - title
        - formFields
    Platform:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: VK
        formFields:
          example:
            name: true
            pages: true
            accessKey: false
            url: true
          allOf:
            - $ref: '#/components/schemas/FormFields'
      required:
        - icon
        - title
        - formFields
    UpdatePlatformDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        title:
          type: string
          example: VK
        formFields:
          $ref: '#/components/schemas/FormFields'
    Messenger:
      type: object
      properties:
        name:
          type: string
          example: VK
        page:
          type: string
          example: vk.com/club1245321223
        accessKey:
          type: string
          example: 1685494522:AAHzRs4YFqckLvBVARVoUL0c3B1GFqlDpo
        url:
          type: string
          example: some_url
      required:
        - name
        - page
        - accessKey
        - url
    Bot:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        botName:
          type: string
          example: Бот Автоответчик
        profile:
          $ref: '#/components/schemas/Profile'
        messenger:
          example:
            name: VK
            page: vk.com/club1245321223
            accessKey: 1685494522:AAHzRs4YFqckLvBVARVoUL0c3B1GFqlDpo
            url: some_url
          allOf:
            - $ref: '#/components/schemas/Messenger'
        botSettings:
          type: object
      required:
        - icon
        - botName
        - profile
        - messenger
        - botSettings
    CreateBotDto:
      type: object
      properties:
        icon:
          type: string
          example: >-
            https://cdn.icon-icons.com/icons2/1233/PNG/512/1492718766-vk_83600.png
        botName:
          type: string
          example: Бот Автоответчик
        profile:
          example: 64f9ac26edb84d7ebf6281d0
          allOf:
            - $ref: '#/components/schemas/ObjectId'
        messenger:
          $ref: '#/components/schemas/Messenger'
        botSettings:
          type: object
          properties: {}
      required:
        - icon
        - botName
        - profile
        - messenger
        - botSettings
